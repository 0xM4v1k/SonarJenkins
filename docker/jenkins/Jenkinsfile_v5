// Jenkinsfile

pipeline {
    agent any

    tools {
        maven "MAVEN_HOME" // Asegúrate que "MAVEN_HOME" es el nombre de tu config de Maven en Jenkins
    }

    stages {
        stage('Clone') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    echo "Limpiando workspace..."
                    cleanWs()
                    echo "Clonando repositorio..."
                    // He actualizado la URL a la que me diste en el último Jenkinsfile
                    git branch: 'master', url: 'https://github.com/0xM4v1k/ecommerce_Dockerizado.git'

                    echo "Verificando estructura de 'sql/' DESPUÉS del clone en el workspace de Jenkins:"
                    sh 'ls -la sql/'
                    sh '''
                        if [ -f "sql/init.sql" ]; then
                          echo "OK: sql/init.sql ES UN ARCHIVO en el workspace de Jenkins."
                        else
                          echo "ADVERTENCIA: sql/init.sql no se encontró o no es un archivo."
                        fi
                    '''
                }
            }
        }
        stage('Build') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    sh "mvn -DskipTests clean package"
                }
            }
        }
        stage('Test') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    sh "mvn test -DskipTests"
                }
            }
        }
        stage('Sonar Analysis') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    withSonarQubeEnv('sonarqube') {
                        sh "mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar -Pcoverage"
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    // Si sigue dando problemas, recuerda que puedes usar 'useWebhook: false'
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Deploy Application') {
            steps {
                echo "Iniciando despliegue de la aplicación con Docker Compose..."
                dir('docker') {
                    script {
                        def dockerProjectName = "ecomapp"

                        try {
                            echo "Deteniendo y eliminando despliegue anterior (si existe)..."
                            sh "docker-compose -p ${dockerProjectName} down -v --remove-orphans --rmi local"
                            echo "Despliegue anterior detenido y limpiado."

                            echo "Intentando eliminar explícitamente el volumen ${dockerProjectName}_mysql_data..."
                            sh "docker volume rm ${dockerProjectName}_mysql_data || true"
                            echo "Intento de eliminación de volumen completado."

                        } catch (Exception e) {
                            echo "Advertencia durante la limpieza: ${e.getMessage()} (Puede que no existiera nada que limpiar)."
                            echo "Continuando con el despliegue..."
                        }
                        
                        // Esta verificación sigue siendo útil para asegurar que el script existe antes de la construcción
                        echo "Verificando estructura de '../sql/' ANTES del docker-compose up:"
                        sh 'ls -la ../sql/'
                        
                        // ---------------------------------------------------------------------
                        // --- CAMBIO APLICADO: LÓGICA SIMPLIFICADA ---
                        // ---------------------------------------------------------------------
                        // Ya no necesitamos exportar ninguna variable de entorno.
                        // El comando 'docker-compose up --build' ahora se encargará de:
                        // 1. Encontrar el 'docker/mysql/Dockerfile'.
                        // 2. Construir la imagen de MySQL, copiando el 'init.sql' dentro de ella.
                        // 3. Levantar todos los servicios.
                        echo "Construyendo imágenes (incluida la de MySQL con el script) y levantando servicios..."
                        sh "docker-compose -p ${dockerProjectName} up -d --build"
                        // ---------------------------------------------------------------------
                        // --- FIN DEL CAMBIO ---
                        // ---------------------------------------------------------------------

                        echo "Comando 'docker-compose up' ejecutado."

                        echo "Esperando a que los servicios se estabilicen (60 segundos)..."
                        sleep(60)
                        
                        echo "Verificando que el script existe DENTRO del contenedor MySQL (¡Ahora sí debería funcionar!):"
                        sh "docker exec mysql-ecommerce-prod ls -l /docker-entrypoint-initdb.d/"
                        
                        sh '''docker exec mysql-ecommerce-prod sh -c 'if [ -f /docker-entrypoint-initdb.d/init.sql ]; then echo "¡ÉXITO! CONTENEDOR: init.sql ES UN ARCHIVO"; else echo "FALLO. CONTENEDOR: init.sql NO SE ENCONTRÓ O NO ES UN ARCHIVO"; fi' '''
                        
                        echo "Logs del contenedor MySQL (mysql-ecommerce-prod) después del 'up':"
                        sh "docker logs mysql-ecommerce-prod"

                        echo "Logs del contenedor de la Aplicación (product_app) después del 'up':"
                        sh "docker logs product_app"

                        echo "Despliegue completado. Aplicación y base de datos deberían estar corriendo."

                        echo "Esperando 90 segundos adicionales antes del health check para la aplicación..."
                        sleep(90)

                        echo "Verificando salud de la aplicación..."
                        sh "curl -v -f --connect-timeout 10 --max-time 20 http://host.docker.internal:8084/actuator/health || exit 1"
                        echo "Aplicación saludable."
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline finalizado.'
        }
        success {
            echo '¡Pipeline ejecutado con éxito!'
        }
        failure {
            echo 'Pipeline falló.'
        }
    }
}
