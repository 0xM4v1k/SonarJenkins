pipeline {
    agent any
    tools {
            // Install the Maven version configured as "M3" and add it to the path.
            maven "MAVEN_HOME"
        }

    environment {
        REPO_DIR = 'ecommerce_Dockerizado'
        DOCKER_DIR = "${REPO_DIR}/docker"
        APP_PORT = "8084"
    }

    stages {
        stage('Setup Docker') {
            steps {
                script {
                    // Verificar que Docker esté instalado
                    sh '''
                        docker --version || { echo "ERROR: Docker no está instalado"; exit 1; }
                        docker compose version || { echo "ERROR: Docker Compose V2 no disponible"; exit 1; }
                    '''
                }
            }
        }

        stage('Clone') {
            steps {
                git branch: 'master', 
                url: 'https://github.com/arlysanchez/ecommerce_Dockerizado.git'
            }
        }

        stage('Build') {
            steps {
                sh "mvn -DskipTests clean package"
            }
        }

         stage('Test') {
         steps {
        timeout(time: 1, unit: 'MINUTES') {
            sh "mvn test -DskipTests"
               }
           }
        }
      stage('Deploy') {
            steps {
                script {
                    withEnv(['DOCKER_HOST=unix:///var/run/docker.sock']) {
                        sh """
                            cd ${REPO_DIR}
                            docker compose -f docker/docker-compose.yml down --remove-orphans --volumes || true
                            docker compose -f docker/docker-compose.yml build --no-cache
                            docker compose -f docker/docker-compose.yml up -d
                        """
                        
                        // Verificación
                        timeout(time: 5, unit: 'MINUTES') {
                            sh """
                                for i in \$(seq 1 12); do
                                    if curl -s http://localhost:${APP_PORT}/actuator/health | grep -q '"status":"UP"'; then
                                        echo "¡Aplicación desplegada correctamente!"
                                        exit 0
                                    fi
                                    sleep 10
                                    echo "Verificando salud de la aplicación (intento \$i/12)..."
                                done
                                echo "ERROR: Tiempo de espera agotado"
                                exit 1
                            """
                        }
                    }
                }
            }
    
    }
 }
}

