pipeline {
    agent any
     tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "MAVEN_HOME"
    }

    stages {
        stage('Clone') {
            steps {
                timeout(time: 2, unit: 'MINUTES'){
                    // Especifica la rama master explícitamente para mayor claridad.
                    git branch: 'master', url: 'https://github.com/arlysanchez/ecommerce_Dockerizado.git'
                }
            }
        }
        stage('Build') {
            steps {
                timeout(time: 2, unit: 'MINUTES'){
                    // Corregido: El pom.xml está en la raíz del workspace después del clone
                    sh "mvn -DskipTests clean package"
                }
            }
        }
         stage('Test') {
         steps {
        timeout(time: 1, unit: 'MINUTES') {
            sh "mvn test -DskipTests"
               }
           }
        }
        stage('Sonar') {
            steps {
                timeout(time: 2, unit: 'MINUTES'){
                    withSonarQubeEnv('sonarqube'){ // Asegúrate que 'sonarqube' es el nombre de tu server SonarQube en la config de Jenkins
                        sh "mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar -Pcoverage"
                    }
                }
            }
        }
        stage('Quality gate') {
            steps {
                sleep(10) //seconds 

                timeout(time: 10, unit: 'MINUTES'){
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Deploy') {
            steps {
                echo "Iniciando despliegue con Docker Compose..."
                // Navegamos al directorio donde está el docker-compose.yml
                // El workspace de Jenkins es la raíz del proyecto clonado (ecommerce_Dockerizado)
                dir('docker') { // El docker-compose.yml está en la subcarpeta 'docker'
                    script {
                        try {
                            // 1. Detener y eliminar contenedores, redes y volúmenes anteriores (si existen)
                            //    para asegurar un despliegue limpio.
                            //    El -v también elimina volúmenes anónimos.
                            //    --remove-orphans elimina contenedores de servicios que ya no existen en el compose file.
                            echo "Deteniendo y eliminando despliegue anterior (si existe)..."
                            sh "docker-compose down -v --remove-orphans"
                        } catch (Exception e) {
                            // Si falla (ej. no había nada corriendo), no es crítico, solo informamos.
                            echo "Advertencia al intentar 'docker-compose down': ${e.getMessage()}"
                            echo "Continuando con el despliegue..."
                        }

                        // 2. Construir las imágenes (si es necesario, ej. la app) y levantar los servicios en segundo plano.
                        //    --build fuerza la reconstrucción de la imagen de la app con el nuevo JAR.
                        echo "Construyendo imágenes y levantando servicios..."
                        sh "docker-compose up -d --build"

                        echo "Despliegue completado. Aplicación y base de datos deberían estar corriendo."
                        echo "App accesible (desde fuera de Docker) en http://<ip_de_tu_maquina_windows>:8084"
        
                        sleep(30)
                        echo "Verificando salud de la aplicación..."
                        // Jenkins está en un contenedor. product_app está en otro, exponiendo el puerto al host Docker.
                        // 'host.docker.internal' es un DNS especial que Docker Desktop proporciona a los contenedores
                        // para acceder a servicios que se ejecutan en la máquina host.
                        // O puedes intentar la IP del gateway de la red docker donde corre Jenkins.
                        // Por ahora, probemos host.docker.internal
                        sh "curl -f http://host.docker.internal:8084/actuator/health || exit 1"
                        echo "Aplicación saludable."
                    }
                }
            }
        }
 }
}

