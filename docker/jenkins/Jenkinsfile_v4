pipeline {
    agent {
        docker {
            image 'docker:24.0'
            args '-v /var/run/docker.sock:/var/run/docker.sock --privileged'
        }
    }
    tools {
            // Install the Maven version configured as "M3" and add it to the path.
            maven "MAVEN_HOME"
        }

    environment {
        REPO_DIR = 'ecommerce_Dockerizado'
        DOCKER_DIR = "${REPO_DIR}/docker"
        APP_PORT = "8084"
    }

    stages {
        stage('Clone') {
            steps {
                git branch: 'master', 
                url: 'https://github.com/arlysanchez/ecommerce_Dockerizado.git'
            }
        }

        stage('Build') {
            steps {
                sh "mvn -DskipTests clean package"
            }
        }

         stage('Test') {
         steps {
        timeout(time: 1, unit: 'MINUTES') {
            sh "mvn test -DskipTests"
               }
           }
        }

        stage('Deploy') {
            steps {
                script {
                    // 1. Verificar estructura
                    sh """
                        echo "Verificando estructura del proyecto..."
                        [ -f "${DOCKER_DIR}/Dockerfile" ] || { echo "ERROR: Dockerfile no encontrado"; exit 1; }
                        [ -f "${DOCKER_DIR}/docker-compose.yml" ] || { echo "ERROR: docker-compose.yml no encontrado"; exit 1; }
                        [ -f "${REPO_DIR}/target/ecommerce-0.0.1-SNAPSHOT.jar" ] || { echo "ERROR: JAR no encontrado"; exit 1; }
                    """

                    // 2. Limpieza previa
                    sh """
                        docker compose -f ${DOCKER_DIR}/docker-compose.yml down --remove-orphans --volumes || true
                    """

                    // 3. Construir y desplegar
                    timeout(time: 15, unit: 'MINUTES') {
                        sh """
                            docker compose -f ${DOCKER_DIR}/docker-compose.yml build --no-cache
                            docker compose -f ${DOCKER_DIR}/docker-compose.yml up -d
                        """
                    }

                    // 4. Verificación
                    timeout(time: 5, unit: 'MINUTES') {
                        sh """
                            for i in \$(seq 1 12); do
                                if curl -s http://localhost:${APP_PORT}/actuator/health | grep -q '"status":"UP"'; then
                                    echo "¡Aplicación desplegada correctamente!"
                                    exit 0
                                fi
                                sleep 10
                                echo "Verificando salud de la aplicación (intento \$i/12)..."
                            done
                            echo "ERROR: Tiempo de espera agotado"
                            exit 1
                        """
                    }
                }
            }
        }
    }
}

